{"version":3,"sources":["scripts\\main.js"],"names":["body","document","querySelector","init","fetchSongFile","then","response","text","addEventListener","songData","groups","readSongData","splitedText","split","songMetaData","filter","line","indexOf","forEach","key","meta","substr","toLowerCase","value","length","trim","parseInt","replace","linesData","groupOfWords","lineData","lineArrayData","str","test","wordData","filteredLineArrayData","convertBeatToTime","bpm","push","Object","assign","group","i","currentGroup","currentGroupLast","nextGroup","group_gap_start","time","group_gap_end","group_duration","group_end","group_start","prevGroup","log","createKaraokeScreen","createDocumentFragment","Math","max","apply","map","o","canvasHeight","ctx","createGroupCanvas","groupStartPoint","startPoint","word","startHeight","tone","width","height","heightMultiplier","pitchTrackContainer","groupCanvas","createElement","getContext","className","appendChild","createSinglePitch","start","fillStyle","fillRect","writeWord","wordArray","words","join","font","fillText","createNoteLines","steps","currentStep","beginPath","moveTo","lineTo","lineWidth","strokeStyle","stroke","beat","floor","xbpm","xbeat_duration","seconds","secondToBeats","beat_pos","cLeft","continueGroup","style","transform","startButton","karaokeStart","playYoutubeVideo","youtubegap","gap","setInterval","karaokePlay","karaokeIntervalTime","startGap","karaokeCurrentGroup","karaokeTime","karaokeInterval","tag","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","player","onYouTubeIframeAPIReady","YT","Player","event","playVideo","stopVideo"],"mappings":"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","file":"main.3cb3d2a8.map","sourceRoot":"..\\src","sourcesContent":["/* ==========================================================================\n   Global variables\n   ========================================================================== */\nconst body = document.querySelector(\"body\");\n\n/* ==========================================================================\n   Initialize\n   ========================================================================== */\ndocument.addEventListener(\"DOMContentLoaded\", init);\nfunction init() {\n  //do stuff after page has loaded\n  fetchSongFile();\n}\n\n/* ==========================================================================\n   Functions\n   ========================================================================== */\n\n//Fetch the song file and save it\nfunction fetchSongFile() {\n  fetch(\n    \"songs/Backstreet%20Boys%20-%20Want%20it%20that%20way/Backstreet%20Boys%20-%20Want%20it%20that%20way.txt\"\n  )\n    .then(response => response.text())\n    .then(text => {\n      readSongData(text);\n    });\n}\n\nlet songData = { groups: [] }; //contains the songdata used for the karaoke\n\n//read the song data so it can later be used for displaying\nfunction readSongData(text) {\n  //Split the text file into an array\n  let splitedText = text.split(\"\\n\");\n\n  //Get song meta data and save it to songMetaData object\n  let songMetaData = {};\n  let songMetaDataTemp = splitedText.filter(function(line) {\n    return line.indexOf(\"#\") == 0;\n  });\n\n  songMetaDataTemp.forEach(meta => {\n    let key = meta.substr(1, meta.indexOf(\":\") - 1).toLowerCase();\n    let value = meta\n      .substr(meta.indexOf(\":\") + 1, meta.length - meta.indexOf(\":\"))\n      .trim();\n    if (key == \"bpm\") {\n      value = parseInt(value.replace(\",\", \".\"));\n    } else {\n    }\n    songMetaData[key] = value;\n  });\n\n  // Get all lines of songs with beats, tone, length and the word, combine together belonging words in a group and add it to song data\n  let linesData = splitedText.filter(function(line) {\n    return line.indexOf(\"#\") != 0;\n  });\n\n  //Save each line as an object in an array\n  let groupOfWords = [];\n  linesData.forEach(lineData => {\n    lineArrayData = lineData.split(/\\s/);\n    filteredLineArrayData = lineArrayData.filter(function(str) {\n      return /\\S/.test(str);\n    });\n\n    let wordData = {};\n\n    //Belongs to the current group of words\n    if (filteredLineArrayData[0] != \"-\") {\n      wordData = {\n        type: filteredLineArrayData[0],\n        time: convertBeatToTime(songMetaData.bpm, filteredLineArrayData[1]),\n        length: convertBeatToTime(songMetaData.bpm, filteredLineArrayData[2]),\n        tone: parseInt(filteredLineArrayData[3]),\n        word: filteredLineArrayData[4]\n      };\n      groupOfWords.push(wordData);\n    } else {\n      songData.groups.push({\n        group_duration: 0, //the whole duration of each group\n        group: groupOfWords, //each word, length, start time and tone\n        group_start: 0, //the start of each group (gaps included)\n        group_end: 0, //the end of each group (gaps included)\n        group_gap_start: 0, //the allowed gap before the first word of this group\n        group_gap_end: 0 //the allowed gap before the end of this group\n      }); //add group of words to the songData array\n      groupOfWords = [];\n    }\n  });\n\n  //Combine song data and meta data\n  songData = Object.assign({}, songData, songMetaData);\n  // { ...songData, ...songMetaData };\n  songData.groups.forEach((group, i) => {\n    const currentGroup = group.group;\n    const currentGroupLast = currentGroup[currentGroup.length - 1];\n    //Add group_gap_start and group_gap_end for all else groups\n    if (i == 0) {\n      const nextGroup = songData.groups[i + 1].group;\n      const group_gap_start = currentGroupLast.time - 0;\n      const group_gap_end =\n        (nextGroup[0].time -\n          (currentGroupLast.time + currentGroupLast.length)) /\n        2;\n      const group_duration =\n        group_gap_start +\n        group_gap_end +\n        (currentGroupLast.time +\n          currentGroupLast.length -\n          currentGroup[0].time);\n\n      const group_end =\n        currentGroupLast.time + currentGroupLast.length + group_gap_end;\n      const group_start = 0;\n      //Update song data\n      songData.groups[i].group_gap_start = group_gap_start;\n      songData.groups[i].group_gap_end = group_gap_end;\n      songData.groups[i].group_duration = group_duration;\n      songData.groups[i].group_end = group_end;\n      songData.groups[i].group_start = group_start;\n    } else if (i == songData.groups.length - 1) {\n      const prevGroup = songData.groups[i - 1].group;\n\n      const group_gap_start =\n        (currentGroup[0].time -\n          (prevGroup[prevGroup.length - 1].time +\n            prevGroup[prevGroup.length - 1].length)) /\n        2;\n\n      const group_gap_end =\n        group.group_end - currentGroupLast.time + currentGroupLast.length;\n      const group_duration =\n        group_gap_start +\n        group_gap_end +\n        (currentGroupLast.time +\n          currentGroupLast.length -\n          currentGroup[0].time);\n      const group_end =\n        currentGroupLast.time + currentGroupLast.length + group_gap_end;\n      const group_start = currentGroup[0].time - group_gap_start;\n      //Update song data\n      songData.groups[i].group_gap_start = group_gap_start;\n      songData.groups[i].group_gap_end = group_gap_end;\n      songData.groups[i].group_duration = group_duration;\n      songData.groups[i].group_end = group_end;\n      songData.groups[i].group_start = group_start;\n    } else {\n      const prevGroup = songData.groups[i - 1].group;\n      const nextGroup = songData.groups[i + 1].group;\n      const group_gap_start =\n        (currentGroup[0].time -\n          (prevGroup[prevGroup.length - 1].time +\n            prevGroup[prevGroup.length - 1].length)) /\n        2;\n      const group_gap_end =\n        (nextGroup[0].time -\n          (currentGroupLast.time + currentGroupLast.length)) /\n        2;\n      const group_duration =\n        group_gap_start +\n        group_gap_end +\n        (currentGroupLast.time +\n          currentGroupLast.length -\n          currentGroup[0].time);\n      const group_end =\n        currentGroupLast.time + currentGroupLast.length + group_gap_end;\n      const group_start = currentGroup[0].time - group_gap_start;\n      //Update song data\n      songData.groups[i].group_gap_start = group_gap_start;\n      songData.groups[i].group_gap_end = group_gap_end;\n      songData.groups[i].group_duration = group_duration;\n      songData.groups[i].group_end = group_end;\n      songData.groups[i].group_start = group_start;\n    }\n  });\n  console.log(songData);\n  createKaraokeScreen();\n}\n\n//Create the karaoke screen based on songData\nfunction createKaraokeScreen() {\n  let fragment = document.createDocumentFragment();\n  let maxGroupLength = Math.max.apply(\n    Math,\n    songData.groups.map(function(o) {\n      return o.group_duration;\n    })\n  );\n\n  songData.groups.forEach((group, i) => {\n    let canvasHeight = 30;\n    let canvasHeightMultiplier = 10;\n\n    let groupCanvas = createGroupCanvas(\n      group.group_duration,\n      canvasHeight,\n      canvasHeightMultiplier\n    );\n    let ctx = groupCanvas;\n    createNoteLines(\n      ctx,\n      group.group_duration,\n      canvasHeight,\n      canvasHeightMultiplier\n    );\n    const groupStartPoint = group.group_start;\n    group.group.forEach(word => {\n      if (i == 0) {\n        const startPoint = word.time;\n        const length = word.length;\n        const startHeight =\n          canvasHeight * canvasHeightMultiplier -\n          word.tone * canvasHeightMultiplier; //get height of the tone to start\n\n        createSinglePitch(ctx, startPoint, length, startHeight);\n      } else {\n        const startPoint = word.time - groupStartPoint;\n        const length = word.length;\n        const startHeight =\n          canvasHeight * canvasHeightMultiplier -\n          word.tone * canvasHeightMultiplier; //get height of the tone to start\n\n        createSinglePitch(ctx, startPoint, length, startHeight);\n        // ctx.fillStyle = \"red\";\n        // ctx.fillRect(startPoint, word.tone * 10, length, 100);\n      }\n    });\n    writeWord(ctx, group.group_duration, group.group);\n  });\n}\n\nfunction createGroupCanvas(width, height, heightMultiplier) {\n  const pitchTrackContainer = document.querySelector(\n    \"#pitch-track .canvas-container\"\n  );\n  let groupCanvas = document.createElement(\"canvas\");\n  let ctx = groupCanvas.getContext(\"2d\");\n\n  groupCanvas.className = \"pitch-group\";\n  groupCanvas.width = width;\n  groupCanvas.height = height * heightMultiplier;\n  pitchTrackContainer.appendChild(groupCanvas);\n  return ctx;\n}\n\nfunction createSinglePitch(ctx, start, length, tone) {\n  ctx.fillStyle = \"red\";\n  ctx.fillRect(start, tone - 5, length, 10);\n}\n\nfunction writeWord(ctx, width, wordArray) {\n  let words = [];\n  wordArray.forEach(word => {\n    words.push(word.word);\n  });\n  let text = words.join(\" \");\n  ctx.fillStyle = \"blue\";\n  ctx.font = \"bold 60px Arial\";\n  ctx.fillText(text, width / 2 - 20, 70);\n}\n\nfunction createNoteLines(ctx, width, height, heightMultiplier) {\n  //Draw 10 horizontal lines\n  let steps = (height * heightMultiplier) / 10;\n  let currentStep = 0;\n  for (let i = 0; i <= 10; i++) {\n    ctx.beginPath();\n    ctx.moveTo(0, currentStep);\n    ctx.lineTo(width, currentStep);\n    ctx.lineWidth = 1;\n    // set line color\n    ctx.strokeStyle = \"#3B4839\";\n    ctx.stroke();\n    currentStep = currentStep + steps;\n  }\n}\n\n//Convert beats to time in miliseconds\nfunction convertBeatToTime(bpm, beat) {\n  return Math.floor((beat / (4 * bpm)) * 60 * 1000);\n}\n\nlet xbpm = 400;\nlet xbeat_duration = 1 / (xbpm / 60);\nlet seconds = 60;\n\nfunction secondToBeats(seconds) {\n  let beat_pos = seconds / xbeat_duration;\n  return Math.floor(beat_pos + xbeat_duration / 2);\n}\n\n// function convertBeatToTime(bpm, beat) {\n//   const beat_duration = 1 / (bpm / 60);\n//   return Math.floor((beat_duration * beat * 1000) / 4);\n// }\n\n/**\n * Control\n */\n\nlet cLeft = 0;\n\nfunction continueGroup() {\n  const pitchTrackContainer = document.querySelector(\n    \"#pitch-track .canvas-container\"\n  );\n  cLeft -= 100;\n  pitchTrackContainer.style.transform = \"translateX(\" + cLeft + \"vw)\";\n  console.log(cLeft);\n}\n\n/**\n * Start Karaoke\n */\nconst startButton = document.querySelector(\".start-button\");\nstartButton.addEventListener(\"click\", karaokeStart);\n\nfunction karaokeStart() {\n  playYoutubeVideo();\n  startGap = parseInt(songData.youtubegap) + parseInt(songData.gap);\n  setTimeout(() => {\n    karaokeInterval = setInterval(karaokePlay, karaokeIntervalTime);\n  }, startGap);\n}\n\n/**\n * Time controller\n */\nlet karaokeCurrentGroup = 0;\nlet karaokeTime = 0;\nlet karaokeIntervalTime = 100;\nlet karaokeInterval; //interval is set in init()\n\nfunction karaokePlay() {\n  karaokeTime += karaokeIntervalTime;\n  console.log(songData.groups[karaokeCurrentGroup].group_end);\n  if (karaokeTime >= songData.groups[karaokeCurrentGroup].group_end) {\n    continueGroup();\n    ++karaokeCurrentGroup;\n  }\n  // clearInterval(karaokeInterval);\n}\n\n/**\n * Add youtube background video\n */\nlet tag = document.createElement(\"script\");\ntag.src = \"https://www.youtube.com/iframe_api\";\nlet firstScriptTag = document.getElementsByTagName(\"script\")[0];\nfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\nlet player;\nfunction onYouTubeIframeAPIReady() {\n  player = new YT.Player(\"player\", {\n    height: \"720\",\n    width: \"1080\",\n    videoId: \"4fndeDfaWCg\",\n    events: {}\n  });\n}\n\nfunction playYoutubeVideo(event) {\n  player.playVideo();\n}\n\nfunction stopVideo() {\n  player.stopVideo();\n}\n"]}